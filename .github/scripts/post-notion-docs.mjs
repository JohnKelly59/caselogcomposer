import * as core from '@actions/core';
import * as github from '@actions/github';
import OpenAI from 'openai';
import fetch from 'node-fetch';

async function run ()
{
    try
    {
        // Validate required environment variables
        const openaiApiKey = process.env.OPENAI_API_KEY;
        const githubToken = process.env.GITHUB_TOKEN;
        const notionToken = process.env.NOTION_TOKEN;
        const notionPageId = process.env.NOTION_PAGE_ID;

        if (!openaiApiKey)
        {
            throw new Error('OPENAI_API_KEY environment variable is not set.');
        }
        if (!githubToken)
        {
            throw new Error('GITHUB_TOKEN environment variable is not set.');
        }
        if (!notionToken)
        {
            throw new Error('NOTION_TOKEN environment variable is not set.');
        }
        if (!notionPageId)
        {
            throw new Error('NOTION_PAGE_ID environment variable is not set.');
        }

        const octokit = github.getOctokit(githubToken);
        const openai = new OpenAI({ apiKey: openaiApiKey });
        const { owner, repo, number: pull_number } = github.context.issue;

        if (!pull_number)
        {
            throw new Error('This action was not triggered by a pull_request event.');
        }

        // Get the pull request diff from GitHub
        const { data: prDiff } = await octokit.rest.pulls.get({
            owner,
            repo,
            pull_number,
            mediaType: { format: 'diff' }
        });

        // Generate a high-level documentation prompt for Notion (non-technical summary)
        const promptHighLevel =
            `The following is a Git diff of changes in this Pull Request compared to the "main" branch.
Generate a high-level summary of the changes that is suitable for project managers, QA, and new hires. Focus on what was accomplished and why, avoiding overly technical details.
Diff:
${prDiff}
`;

        console.log('Calling OpenAI API to generate high-level documentation for Notion...');
        const responseHighLevel = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                {
                    role: 'system',
                    content: 'You are a helpful documentation generator that creates high-level, non-technical summaries of changes.'
                },
                {
                    role: 'user',
                    content: promptHighLevel
                }
            ],
            max_tokens: 800
        });

        const highLevelDocs = responseHighLevel.choices?.[0]?.message?.content?.trim() || '';
        if (!highLevelDocs)
        {
            throw new Error('No high-level documentation was generated by the OpenAI API.');
        }

        // Post the high-level documentation to Notion
        console.log('Posting high-level documentation to Notion...');
        const notionEndpoint = `https://api.notion.com/v1/blocks/${notionPageId}/children`;
        const notionPayload = {
            children: [
                {
                    object: 'block',
                    type: 'heading_2',
                    heading_2: {
                        text: [
                            {
                                type: 'text',
                                text: { content: 'Auto-Generated Documentation' }
                            }
                        ]
                    }
                },
                {
                    object: 'block',
                    type: 'paragraph',
                    paragraph: {
                        text: [
                            {
                                type: 'text',
                                text: { content: highLevelDocs }
                            }
                        ]
                    }
                }
            ]
        };

        const notionResponse = await fetch(notionEndpoint, {
            method: 'PATCH',
            headers: {
                'Authorization': `Bearer ${notionToken}`,
                'Content-Type': 'application/json',
                'Notion-Version': '2022-06-28'
            },
            body: JSON.stringify(notionPayload)
        });

        if (!notionResponse.ok)
        {
            const errorBody = await notionResponse.text();
            throw new Error(`Failed to post documentation to Notion. Status: ${notionResponse.status}. Body: ${errorBody}`);
        }
        console.log('Successfully posted documentation to Notion.');
    } catch (error)
    {
        console.error('Error generating or posting Notion documentation:', error);
        core.setFailed(error.message);
    }
}

run();
