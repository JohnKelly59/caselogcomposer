import * as core from '@actions/core';
import * as github from '@actions/github';
import OpenAI from 'openai';

async function run ()
{
  try
  {
    // Validate required environment variables
    const openaiApiKey = process.env.OPENAI_API_KEY;
    const githubToken = process.env.GITHUB_TOKEN;

    if (!openaiApiKey)
    {
      throw new Error('OPENAI_API_KEY environment variable is not set.');
    }
    if (!githubToken)
    {
      throw new Error('GITHUB_TOKEN environment variable is not set.');
    }

    const octokit = github.getOctokit(githubToken);
    const openai = new OpenAI({ apiKey: openaiApiKey });
    const { owner, repo, number: pull_number } = github.context.issue;

    if (!pull_number)
    {
      throw new Error('This action was not triggered by a pull_request event.');
    }

    // Get the pull request diff from GitHub
    const { data: prDiff } = await octokit.rest.pulls.get({
      owner,
      repo,
      pull_number,
      mediaType: { format: 'diff' }
    });

    // --- Remove previous auto-generated documentation comments ---
    console.log('Removing previous auto-generated documentation comments...');
    const commentsResponse = await octokit.rest.issues.listComments({
      owner,
      repo,
      issue_number: pull_number,
    });

    for (const comment of commentsResponse.data)
    {
      if (comment.body && comment.body.startsWith('<!-- auto-docs -->'))
      {
        await octokit.rest.issues.deleteComment({
          owner,
          repo,
          comment_id: comment.id,
        });
        console.log(`Deleted comment ID: ${comment.id}`);
      }
    }

    // --- Developer-Savvy Documentation (for PR Comment) ---
    const promptDev =
      `The following is a Git diff of changes in this Pull Request compared to the "main" branch.
Generate concise, helpful, and developer-focused README-style documentation that clearly explains what changed, why, and any technical implications. Include details that would aid code reviewers and developers.
Diff:
${prDiff}`;

    console.log('Calling OpenAI API to generate developer documentation...');
    const responseDev = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful documentation generator that creates nicely formatted README.md content for developers.'
        },
        {
          role: 'user',
          content: promptDev
        }
      ],
      max_tokens: 800
    });

    const developerDocs = responseDev.choices?.[0]?.message?.content?.trim() || '';
    if (!developerDocs)
    {
      throw new Error('No developer documentation was generated by the OpenAI API.');
    }

    console.log('Posting developer documentation as a PR comment...');
    await octokit.rest.issues.createComment({
      owner,
      repo,
      issue_number: pull_number,
      body: `<!-- auto-docs -->\n## üìù Auto-Generated Documentation (Developer View)\n\n${developerDocs}`
    });
    console.log('Successfully posted developer documentation as a PR comment.');
  } catch (error)
  {
    console.error('Error generating or posting documentation:', error);
    core.setFailed(error.message);
  }
}

run();
