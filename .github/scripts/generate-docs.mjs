// If you don't rename this file to .mjs, ensure "type": "module" is specified in package.json.

import * as core from '@actions/core';
import * as github from '@actions/github';
import OpenAI from 'openai';

async function run ()
{
  try
  {
    // 1. Retrieve API keys from environment variables.
    const openaiApiKey = process.env.OPENAI_API_KEY;
    const githubToken = process.env.GITHUB_TOKEN;

    if (!openaiApiKey)
    {
      throw new Error('OPENAI_API_KEY environment variable is not set.');
    }
    if (!githubToken)
    {
      throw new Error('GITHUB_TOKEN environment variable is not set.');
    }

    // 2. Create GitHub and OpenAI clients.
    const octokit = github.getOctokit(githubToken);
    const openai = new OpenAI({ apiKey: openaiApiKey });

    // 3. Extract context info: owner, repo, pull_request number.
    const { owner, repo, number: pull_number } = github.context.issue;
    // If using workflow_run or different event contexts, you may need to handle those differently.

    if (!pull_number)
    {
      throw new Error('This action was not triggered by a pull_request event.');
    }

    // 4. Retrieve the diff from the Pull Request.
    // Note: Setting `mediaType.format = 'diff'` requests the raw diff.
    const { data: prDiff } = await octokit.rest.pulls.get({
      owner,
      repo,
      pull_number,
      mediaType: {
        format: 'diff'
      }
    });

    // 5. Construct the prompt from the PR diff.
    const prompt = `
The following is a Git diff of changes in this Pull Request compared to the "main" branch.
Generate concise, helpful README-style documentation describing what changed and why.

Diff:
${prDiff}
`;

    // 6. Call the OpenAI Chat API (example with GPT-4).
    //    If you don't have access to `gpt-4`, you may use `gpt-3.5-turbo` or another supported model.
    console.log('Calling OpenAI API to generate documentation...');
    const response = await openai.chat.completions.create({
      model: 'gpt-4o', // Or 'gpt-4-0613', 'gpt-3.5-turbo', etc.
      messages: [
        {
          role: 'system',
          content: 'You are a helpful documentation generator that creates nicely formatted README.md content.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 800
    });

    // 7. Extract generated documentation from the API response.
    const docs = response.choices?.[0]?.message?.content?.trim() || '';
    if (!docs)
    {
      throw new Error('No documentation was generated by the OpenAI API.');
    }

    // 8. Post the documentation as a comment in the Pull Request.
    //    Feel free to add Markdown headings or other formatting to `docs`.
    await octokit.rest.issues.createComment({
      owner,
      repo,
      issue_number: pull_number,
      body: `## üìù Auto-Generated Documentation\n\n${docs}`
    });

    console.log('Successfully posted documentation as a PR comment.');

  } catch (error)
  {
    console.error('Error generating or posting documentation:', error);
    core.setFailed(error.message);
  }
}

run();
