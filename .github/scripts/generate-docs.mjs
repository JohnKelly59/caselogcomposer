import * as core from '@actions/core';
import * as github from '@actions/github';
import OpenAI from 'openai';
import fetch from 'node-fetch';

async function run ()
{
  try
  {
    // Required environment variables
    const openaiApiKey = process.env.OPENAI_API_KEY;
    const githubToken = process.env.GITHUB_TOKEN;
    const notionToken = process.env.NOTION_TOKEN;
    const notionPageId = process.env.NOTION_PAGE_ID;

    if (!openaiApiKey)
    {
      throw new Error('OPENAI_API_KEY environment variable is not set.');
    }
    if (!githubToken)
    {
      throw new Error('GITHUB_TOKEN environment variable is not set.');
    }

    const octokit = github.getOctokit(githubToken);
    const openai = new OpenAI({ apiKey: openaiApiKey });
    const { owner, repo, number: pull_number } = github.context.issue;

    if (!pull_number)
    {
      throw new Error('This action was not triggered by a pull_request event.');
    }

    // Get the pull request diff from GitHub
    const { data: prDiff } = await octokit.rest.pulls.get({
      owner,
      repo,
      pull_number,
      mediaType: { format: 'diff' }
    });

    // === Developer-Savvy Documentation (for PR Comment) ===
    const promptDev =
      `The following is a Git diff of changes in this Pull Request compared to the "main" branch.
Generate concise, helpful, and developer-focused README-style documentation that clearly explains what changed, why, and any technical implications. Include details that would aid code reviewers and developers.
Diff:
${prDiff}
`;

    console.log('Calling OpenAI API to generate developer documentation...');
    const responseDev = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful documentation generator that creates nicely formatted README.md content for developers.'
        },
        {
          role: 'user',
          content: promptDev
        }
      ],
      max_tokens: 800
    });

    const developerDocs = responseDev.choices?.[0]?.message?.content?.trim() || '';
    if (!developerDocs)
    {
      throw new Error('No developer documentation was generated by the OpenAI API.');
    }

    console.log('Posting developer documentation as a PR comment...');
    await octokit.rest.issues.createComment({
      owner,
      repo,
      issue_number: pull_number,
      body: `## üìù Auto-Generated Documentation (Developer View)\n\n${developerDocs}`
    });
    console.log('Successfully posted developer documentation as a PR comment.');

    // === High-Level Documentation for Notion (for less technical audiences) ===
    const promptHighLevel =
      `The following is a Git diff of changes in this Pull Request compared to the "main" branch.
Generate a high-level summary of the changes that is suitable for project managers, QA, and new hires. Focus on what was accomplished and why, avoiding overly technical details.
Diff:
${prDiff}
`;

    console.log('Calling OpenAI API to generate high-level documentation for Notion...');
    const responseHighLevel = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful documentation generator that creates high-level, non-technical summaries of changes.'
        },
        {
          role: 'user',
          content: promptHighLevel
        }
      ],
      max_tokens: 800
    });

    const highLevelDocs = responseHighLevel.choices?.[0]?.message?.content?.trim() || '';
    if (!highLevelDocs)
    {
      throw new Error('No high-level documentation was generated by the OpenAI API.');
    }

    // Post to Notion only if both NOTION_TOKEN and NOTION_PAGE_ID are set
    if (!notionToken)
    {
      console.warn('NOTION_TOKEN environment variable is not set. Skipping Notion integration.');
    } else if (!notionPageId)
    {
      console.warn('NOTION_PAGE_ID environment variable is not set. Skipping Notion integration.');
    } else
    {
      console.log('Posting high-level documentation to Notion...');
      const notionEndpoint = `https://api.notion.com/v1/blocks/${notionPageId}/children`;
      const notionPayload = {
        children: [
          {
            object: 'block',
            type: 'heading_2',
            heading_2: {
              text: [
                {
                  type: 'text',
                  text: { content: 'Auto-Generated Documentation' }
                }
              ]
            }
          },
          {
            object: 'block',
            type: 'paragraph',
            paragraph: {
              text: [
                {
                  type: 'text',
                  text: { content: highLevelDocs }
                }
              ]
            }
          }
        ]
      };

      const notionResponse = await fetch(notionEndpoint, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${notionToken}`,
          'Content-Type': 'application/json',
          'Notion-Version': '2022-06-28'
        },
        body: JSON.stringify(notionPayload)
      });

      if (!notionResponse.ok)
      {
        const errorBody = await notionResponse.text();
        throw new Error(`Failed to post documentation to Notion. Status: ${notionResponse.status}. Body: ${errorBody}`);
      }
      console.log('Successfully posted documentation to Notion.');
    }
  } catch (error)
  {
    console.error('Error generating or posting documentation:', error);
    core.setFailed(error.message);
  }
}

run();
